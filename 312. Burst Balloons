#0 是真他妈的难啊，当然还是想到了dp
#1 确实是dp，核心思想是 烧掉一个气球，被烧掉的气球坐边和右边最大值并不受到其影响，按任何顺序扎破左半边的所有气球不会影响右半边的最大值
class Solution:
    def maxCoins(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = [1] + nums + [1]
        l = len(nums)
        dp = [[0]*l for _ in range(l)]
        
        def caculate(a, b):
            if dp[a][b] or b == a+1:
                return dp[a][b]
            for k in range(a+1, b):
                dp[a][b] = max(dp[a][b], nums[a] * nums[k] * nums[b] + caculate(a, k) + caculate(k, b)) # 核心算法
            return dp[a][b]
        
        return caculate(0, l-1)
        
#2  速度第一算法，本质上与上一算法思想上还是一样，但有作改进
class Solution:
    def maxCoins(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        nums = [num for num in nums if num > 0]  #碰到0 先把0戳爆，不影响整体
        if not nums:
            return 0
        nums = [1] + nums + [1]
        n = len(nums)
        dp = [[0]*n for _ in nums]
        for r in range(2, n):
            for l in range(r-2, -1, -1):
                ac = 0
                for k in range(l+1, r):
                    sco = dp[l][k] + dp[k][r] + nums[l] * nums[k] * nums[r]  # 从无到有的算起
                    ac = sco if sco > ac else ac
                dp[l][r] = ac
        return dp[0][n-1]
