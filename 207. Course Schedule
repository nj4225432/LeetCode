#  0 不会，还是不会
# 1  DFS
class Solution:
  def canFinish(self, numCourses, prerequisites):
      graph = [[] for _ in range(numCourses)]
      visit = [0 for _ in range(numCourses)] # visit默认0，参观过就是-1，如果没问题就是1
      for x, y in prerequisites:
          graph[x].append(y) # 创造一个内列表，graph[x]装必要的y，精髓
      def dfs(i):
          if visit[i] == -1:
              return False
          if visit[i] == 1:
              return True
          visit[i] = -1
          for j in graph[i]:
              if not dfs(j):
                  return False
          visit[i] = 1
          return True
      for i in range(numCourses):
          if not dfs(i):
              return False
      return True
      
# 2  速度排名第一的算法
class Solution:
    def canFinish(self, numCourses, prerequisites):
        mat = [[] for _ in range(numCourses)]
        degrees = [0] * numCourses
        
        for l in prerequisites:
            mat[l[1]].append(l[0])
            degrees[l[0]] += 1
        
        stack = []
        for i in range(len(degrees)):
            if degrees[i] == 0:
                stack.append(i)
        
        result = 0
        while stack:
            result += 1
            prev = stack.pop()
            for next in mat[prev]:
                degrees[next] -= 1
                if degrees[next] == 0:
                    stack.append(next)
        
        
        return result == numCourses
