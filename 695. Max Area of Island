#0 自己的错误DFS法， 凡是有带入加减的不要用并行DFS法，此法仅使用于append 的
class Solution:
    def maxAreaOfIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        res = []
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    val = 0
                    self.dfs(i, j, grid, val, res)
        if not res:
            return 0
        else:
            return max(res)
    def dfs(self, i, j, grid, val, res):
        val += 1
        grid[i][j] = '#'
        res.append(val)
        if i+1 < len(grid) and grid[i+1][j] == 1:
            self.dfs(i+1, j, grid, val, res)
        if i-1 >= 0 and grid[i-1][j] == 1:
            self.dfs(i-1, j, grid, val, res)
        if j+1 < len(grid[0]) and grid[i][j+1] == 1:
            self.dfs(i, j+1, grid, val, res)
        if j-1 >= 0 and grid[i][j-1] == 1:
            self.dfs(i, j-1, grid, val, res)

#1  简直绝妙的内置DFS 迭代法， I like it!
class Solution:
    def maxAreaOfIsland(self, grid):
        m, n = len(grid), len(grid[0])

        def dfs(i, j):
            if 0 <= i < m and 0 <= j < n and grid[i][j]:
                grid[i][j] = 0
                return 1 + dfs(i - 1, j) + dfs(i, j + 1) + dfs(i + 1, j) + dfs(i, j - 1)
            return 0

        areas = [dfs(i, j) for i in range(m) for j in range(n) if grid[i][j]]
        return max(areas) if areas else 0
