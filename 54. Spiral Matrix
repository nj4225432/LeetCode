# 0 自己的方法，44ms beat 19.57%  核心思想是剥洋葱，每次一次都去掉matrix中的元素，每一次遍历matrix都不一样
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        res = []
        index = 0
        while matrix:  # 一共分4种情况
            if index % 4 == 0:
                res.extend(matrix.pop(0))
                index += 1
            elif index % 4 == 1:
                for i in range(0, len(matrix)):
                    res.append(matrix[i].pop())
                matrix = [_ for _ in matrix if _ != []]   # 去掉列表中的空列表               
                index += 1
            elif index % 4 == 2:
                res.extend(matrix.pop()[::-1])
                index += 1
            elif index % 4 == 3:
                for i in range(len(matrix)-1, -1, -1):
                    res.append(matrix[i].pop(0))
                    matrix = [_ for _ in matrix if _ != []]    
                index += 1      
        return res

# 1 28ms方法，其实是我(我想也应该是大多数人)一开始的想法，就是按着顺序来遍历，只是要实现起来确实还是有点难度。要分奇偶的情况来考虑
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if(len(matrix)==0 or len(matrix[0])==0):
            return []
        i = 0  #这个i就是最关键的部分
        rows = len(matrix)
        cols = len(matrix[0])
        result=[]
        while(1):
            top = i   # 其实这4个就是遍历的顺序
            right = cols-i-1
            bottom = rows-i-1
            left = i
            if(left>right or bottom<top):
                break
            result.append(matrix[top][left])  # 先吸取首点，适应奇数点
            #First go right
            for j in range(left+1,right+1):
                result.append(matrix[top][j])
            #Then go bottom
            for j in range(top+1,bottom+1):
                result.append(matrix[j][right])
            #Then go left
            if(top<bottom): # 等于的时候
                for j in range(right-1,left-1,-1):
                    result.append(matrix[bottom][j])
            #Then go top
            if(left<right):
                for j in range(bottom-1,top,-1):
                    result.append(matrix[j][left])
            i+=1
