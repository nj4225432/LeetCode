# 0  虽然速度慢了点，但为自编，且精确地用到了递归   当然，这是暴力解法啦，正宗的Brute Force
class Solution:
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        def search(matrix, i, j, n):
            if i+n >= len(matrix) or j+n >= len(matrix[0]):
                return 1
            else:            
                for x in range(i, i+n+1):
                    for y in range(j, j+n+1):
                        if matrix[x][y] == '0':
                            return 1
                return 1+search(matrix, i, j, n+1)

        count = 0
        for i in range(len(matrix)):
             for j in range(len(matrix[0])):
                    if matrix[i][j] == '1':
                        count = max(count, (search(matrix, i, j, 1))**2)
        return count
        
# 1 此题居然是动态规划题，参照Soulution 之后，自己的DP法，但是有问题。 
        if not matrix:
            return 0
        if len(matrix) == 1:
            for i in matrix[0]:
                if i == '1':
                    return 1
        if len(matrix[0]) == 1:
            for i in matrix:
                if i[0] == '1':
                    return 1
        dp = matrix[:]
        count = '0'
        for i in range(1, len(matrix)):
            for j in range(1, len(matrix[0])):
                if dp[i][j] == '1':
                    dp[i][j] = str(int(min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])) + 1)
                    count = max(dp[i][j], count)
        if count == '0':
            for i in matrix[0]:
                if i == '1':
                    return 1
            for i in matrix:
                if i[0] == '1':
                    return 1
        return int(count)**2
        
# 2 以后碰到此类题还是先重新生成一个新的int 全0矩阵。
class Solution:
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        dp = [[0 for _ in matrix[0]] for __ in matrix]
        count = 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if i == 0:
                    dp[i][j] == int(matrix[i][j])
                if j == 0:
                    dp[i][j] == int(matrix[i][j])
                if matrix[i][j] == '1':
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # 此题DP的key步骤，正方形的右下角
                    count = max(count, dp[i][j])
        return count**2
