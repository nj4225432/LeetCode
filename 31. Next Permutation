# 0 自己完全不会， 包括 brute force  首先连全排列一开始都不理解
# 1 Single pass approch  很经典
class Solution:
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        l = len(nums) - 1
        while nums[l] <= nums[l-1] and l > 0:
            l -= 1
        if l == 0:
            return self.reverse(nums, 0, len(nums)-1)
        pivot = l - 1 #从右开始找第一个右大于左的点
        successor = 0 # 找交换点
        for i in range(len(nums)-1, pivot, -1):
            if nums[i] > nums[pivot]:
                successor = i
                break
        nums[pivot], nums[successor] = nums[successor], nums[pivot]
        self.reverse(nums, pivot+1, len(nums)-1) # 在pivot 点之后的一定是降序的，无论是否交换
    def reverse(self, nums, left, right):  # 逆序的方法
        while left < right:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
            right -= 1
