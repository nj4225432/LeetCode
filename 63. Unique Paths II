#0 思维当然是动态规划啦  40 ms, faster than 63.42%
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if obstacleGrid[0][0] == 1:
            return 0
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        grid = [[0 for i in range(n)] for j in range(m)]
        grid[0][0] = 1
        for i in range(1, m):
            if obstacleGrid[i][0] == 1:
                break
            grid[i][0] = 1
        for j in range(1, n):
            if obstacleGrid[0][j] == 1:
                break
            grid[0][j] = 1
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 1:
                    continue
                grid[i][j] = grid[i-1][j] + grid[i][j-1] 
        return grid[-1][-1]
        
#1 最快的24ms
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        # if 1 in obstacleGrid[0]:
        #     i = obstacleGrid[0].index(1)
        #     dp = [1] * i + [0] * (n-i)
        # else:
        #     dp = [1] * n
        dp = [1] + [0]*(n-1)
        for i in range(m): # 从每一行起，都只需要指导上一行的加上左边的就行啊，所有只需要保存一行数据
            if obstacleGrid[i][0]:
                dp[0] = 0
            for j in range(1, n):
                if obstacleGrid[i][j]:
                    dp[j] = 0
                else:
                    dp[j] += dp[j-1] 
        return dp[-1]
